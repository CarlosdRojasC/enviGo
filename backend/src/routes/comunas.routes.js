// backend/src/routes/communes.routes.js
const express = require('express');
const router = express.Router();
const { authenticateToken, isAdmin } = require('../middleware/auth');
const Order = require('../models/Order');
const Channel = require('../models/Channel');
const mongoose = require('mongoose');

// ==================== RUTAS DE COMUNAS ====================

// Obtener lista de comunas que maneja enviGo
router.get('/envigo', authenticateToken, async (req, res) => {
  try {
    // Comunas espec√≠ficas que maneja enviGo
    const envigoCommunes = [
      'Macul',
      'San Miguel', 
      'Santiago Centro',
      'La Florida',
      'Pe√±alol√©n',
      'Las Condes',
      'Vitacura',
      'Quinta Normal',
      'Independencia',
      'Recoleta',
      'Huechuraba',
      'Quilicura',
      'Estaci√≥n Central',
      '√ëu√±oa',
      'La Reina',
      'San Joaqu√≠n',
      'Pedro Aguirre Cerda',
      'Cerrillos',
      'Renca',
      'La Granja',
      'La Cisterna',
      'San Ram√≥n',
      'Cerro Navia'
    ];
    
    // Agrupar por zonas geogr√°ficas para mejor organizaci√≥n
    const communesByZone = {
      'Zona Norte': ['Huechuraba', 'Quilicura', 'Recoleta', 'Independencia'],
      'Zona Centro': ['Santiago Centro', 'Estaci√≥n Central', 'Quinta Normal'],
      'Zona Oriente': ['Las Condes', 'Vitacura', '√ëu√±oa', 'La Reina', 'Pe√±alol√©n', 'Macul'],
      'Zona Sur': ['San Miguel', 'San Joaqu√≠n', 'Pedro Aguirre Cerda', 'La Cisterna', 'San Ram√≥n', 'La Granja'],
      'Zona Poniente': ['Cerrillos', 'Renca', 'Cerro Navia'],
      'Zona Sur-Oriente': ['La Florida']
    };
    
    res.json({
      success: true,
      total_communes: envigoCommunes.length,
      communes: envigoCommunes.sort(),
      communes_by_zone: communesByZone,
      message: 'Comunas que maneja enviGo'
    });
  } catch (error) {
    console.error('‚ùå Error obteniendo comunas de enviGo:', error);
    res.status(500).json({ error: 'Error obteniendo comunas de enviGo' });
  }
});

// Obtener comunas disponibles en pedidos (para estad√≠sticas)
router.get('/available', authenticateToken, async (req, res) => {
  try {
    const { company_id } = req.query;
    
    const filters = {};
    
    // Aplicar filtro de empresa seg√∫n el rol del usuario
    if (req.user.role === 'admin') {
      if (company_id) {
        filters.company_id = new mongoose.Types.ObjectId(company_id);
      }
    } else {
      if (req.user.company_id) {
        filters.company_id = new mongoose.Types.ObjectId(req.user.company_id);
      }
    }
    
    console.log('üèòÔ∏è Obteniendo comunas disponibles con filtros:', filters);
    
    // Pipeline de agregaci√≥n para obtener comunas √∫nicas
    const communes = await Order.aggregate([
      { $match: filters },
      {
        $group: {
          _id: '$shipping_commune',
          count: { $sum: 1 }
        }
      },
      {
        $match: {
          _id: { $ne: null, $ne: '' }
        }
      },
      {
        $sort: { _id: 1 }
      },
      {
        $project: {
          commune: '$_id',
          count: 1,
          _id: 0
        }
      }
    ]);
    
    console.log('‚úÖ Comunas encontradas:', communes.length);
    
    res.json({
      success: true,
      communes: communes.map(c => c.commune),
      detailed: communes,
      total: communes.length
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo comunas disponibles:', error);
    res.status(500).json({ error: 'Error obteniendo comunas disponibles' });
  }
});

module.exports = router;